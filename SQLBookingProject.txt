#Hotel Booking Database Project

#This project simulates a hotel database for managing guests, reservations, rooms and payments.
#The purpose is to demonstrate the ability to work with SQL at a moderately advanced level.
#Create database tables and link them using FOREIGN KEY.
#Inserting data (INSERT INTO).
#SELECT, JOIN, GROUP BY, aggregation, CASE WHEN, working with NULL values.



# Creating the Guests table
CREATE TABLE Guests(
  guest_id INT PRIMARY KEY,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  email VARCHAR(100),
  phone_number VARCHAR(20),
  country VARCHAR(50),
  date_of_birth DATE
);

# Creating the Rooms table
CREATE TABLE Rooms (
  room_id INT PRIMARY KEY,
  room_number VARCHAR(10),
  room_type VARCHAR(20),
  price_per_night DECIMAL(10,2)
);

# Creating the Bookings table
CREATE TABLE Bookings (
  booking_id INT PRIMARY KEY,
  guest_id INT,
  room_id INT,
  check_in_date DATE,
  check_out_date DATE,
  booking_date DATE,
  special_requests VARCHAR(255),
  FOREIGN KEY (guest_id) REFERENCES Guests(guest_id),
  FOREIGN KEY (room_id) REFERENCES Rooms(room_id)
);

# Creating the Payments table
CREATE TABLE Payments(
  payment_id INT PRIMARY KEY,
  booking_id INT,
  payment_date DATE,
  amount DECIMAL(10,2),
  payment_method VARCHAR(20),
  FOREIGN KEY (booking_id) REFERENCES Bookings(booking_id)
);

#  Inserting data into the Guests table
INSERT INTO Guests (guest_id, first_name, last_name, email, phone_number, country, date_of_birth) VALUES
(1, 'John', 'Doe', 'john.doe@example.com', '+421900111222', 'USA', '1985-07-10'),
(2, 'Anna', 'Smith', 'anna.smith@example.com', '+421900333444', 'UK', NULL),
(3, 'Peter', 'Nov√°k', 'peter.novak@example.com', '+421900555666', 'Slovakia', '1992-03-25'),
(4, 'Maria', 'Gomez', 'maria.gomez@example.com', '+421900777888', 'Spain', '1988-11-05'),
(5, 'Li', 'Wang', 'li.wang@example.com', '+421900999000', 'China', NULL);

# Inserting data into the Rooms table
INSERT INTO Rooms (room_id, room_number, room_type, price_per_night) VALUES
(1, '101', 'Single', 50.00),
(2, '102', 'Double', 80.00),
(3, '201', 'Single', 55.00),
(4, '202', 'Suite', 150.00),
(5, '301', 'Double', 85.00);

# Inserting data into the Bookings table
INSERT INTO Bookings (booking_id, guest_id, room_id, check_in_date, check_out_date, booking_date, special_requests) VALUES
(1, 1, 2, '2025-04-01', '2025-04-05', '2025-03-20', 'Late check-in'),
(2, 2, 1, '2025-04-03', '2025-04-07', '2025-03-25', NULL),
(3, 3, 4, '2025-04-10', '2025-04-15', '2025-03-28', 'Sea view room'),
(4, 4, 5, '2025-04-12', '2025-04-14', '2025-04-01', NULL),
(5, 5, 3, '2025-04-20', '2025-04-25', '2025-04-10', 'Extra pillows'),
(6, 1, 5, '2025-05-01', '2025-05-04', '2025-04-15', NULL);

# Inserting data into the Payments table
INSERT INTO Payments (payment_id, booking_id, payment_date, amount, payment_method) VALUES
(1, 1, '2025-04-05', 320.00, 'Card'),
(2, 2, '2025-04-07', 200.00, 'Cash'),
(3, 3, '2025-04-15', 750.00, 'Card'),
(4, 4, '2025-04-14', 170.00, 'Card'),
(5, 5, '2025-04-25', 275.00, 'Cash'),
(6, 6, '2025-05-04', 255.00, 'Card');

# Selecting guests from Slovakia
SELECT *
FROM Guests
WHERE country = 'Slovakia';

# Selecting emails of guests without a date of birth
SELECT email
FROM Guests
WHERE date_of_birth IS NULL;

# Listing all bookings with basic information
SELECT
  booking_id,
  first_name,
  last_name,
  room_number,
  room_type,
  check_in_date,
  check_out_date
FROM
  Bookings
JOIN
  Rooms ON Bookings.room_id = Rooms.room_id
JOIN
  Guests ON Bookings.guest_id = Guests.guest_id;

# Sorting guests by payment amount
SELECT 
  Guests.guest_id, 
  Guests.first_name, 
  Guests.last_name,
  Payments.amount
FROM 
  Payments
JOIN 
  Bookings ON Payments.booking_id = Bookings.booking_id
JOIN 
  Guests ON Bookings.guest_id = Guests.guest_id
ORDER BY amount DESC;

# Number of bookings per guest
SELECT 
  first_name, 
  last_name, 
  COUNT(booking_id) AS total_bookings
FROM 
  Guests
JOIN 
  Bookings ON Guests.guest_id = Bookings.guest_id
GROUP BY 
  first_name, last_name
ORDER BY 
  total_bookings DESC;

# Average price per night by room type
SELECT 
  room_type,
  AVG(price_per_night) AS avg_price_per_night
FROM 
  Rooms
GROUP BY
  room_type
ORDER BY
  avg_price_per_night DESC;

# Checking special requests using CASE statement
SELECT 
  booking_id,
  first_name,
  last_name,
  check_in_date,
  check_out_date,
  CASE 
    WHEN special_requests IS NOT NULL THEN special_requests
    ELSE 'No Request'
  END AS special_request_status
FROM 
  Bookings
JOIN 
  Guests ON Bookings.guest_id = Guests.guest_id;

# Counting guests with a date of birth provided
SELECT COUNT(guest_id)
FROM Guests
WHERE date_of_birth IS NOT NULL;

#  Calculating guests' age
SELECT 
  guest_id, 
  first_name,
  last_name,
  date_of_birth, 
  FLOOR(DATEDIFF(CURDATE(), date_of_birth) / 365) AS age
FROM Guests
WHERE date_of_birth IS NOT NULL;

# Number of bookings by day of the week
SELECT 
  DAYNAME(check_in_date) AS check_in_day,
  COUNT(*) AS total_check_ins
FROM Bookings
GROUP BY check_in_day
ORDER BY total_check_ins DESC;

# Calculating the length of stay for each guest
SELECT 
  booking_id,
  guest_id,
  check_in_date, 
  check_out_date, 
  first_name, 
  last_name, 
  DATEDIFF(check_out_date, check_in_date) AS stay_duration
FROM 
  Bookings
JOIN 
  Guests ON Bookings.guest_id = Guests.guest_id;

# Ranking guests by total payment
SELECT 
  booking_id,
  SUM(amount) AS total_paid,
  RANK() OVER (ORDER BY SUM(amount) DESC) AS payment_rank
FROM 
  Payments
GROUP BY booking_id;

# Comprehensive listing of all bookings, rooms, payments, and guests
SELECT
  first_name,
  last_name,
  country,
  check_in_date,
  room_type,
  DATEDIFF(check_out_date, check_in_date) AS stay_duration,
  amount,
  payment_method
FROM
  Bookings 
JOIN
  Payments ON Payments.booking_id = Bookings.booking_id
JOIN
  Guests ON Guests.guest_id = Bookings.guest_id
JOIN
  Rooms ON Rooms.room_id = Bookings.room_id;
